name: CI/CD for Helloworld Python App
on:
  push:
    branches:
      - main

jobs:
  build:
    runs-on: ubuntu-latest
    steps:
      - name: Checkout repository
        uses: actions/checkout@v3

      - name: Set up Docker
        run: docker build -t ghcr.io/$GITHUB_ACTOR/my-python-app:latest .

      - name: Push Image to GitHub Container Registry
        run: |
          echo "${{ secrets.GITHUBTOKEN }}" | docker login ghcr.io -u $GITHUB_ACTOR --password-stdin
          docker push ghcr.io/$GITHUB_ACTOR/my-python-app:latest

  deploy:
    runs-on: ubuntu-latest
    needs: build
    steps:
      - name: Checkout repository
        uses: actions/checkout@v3

      - name: Setup kubectl
        uses: azure/setup-kubectl@v3

      - name: Start Minikube and Set Context
        run: |
          minikube status || minikube start
          kubectl config use-context minikube

      - name: Pull Docker Image into Minikube
        run: |
          minikube ssh "docker pull ghcr.io/$GITHUB_ACTOR/my-python-app:latest"
          minikube image load ghcr.io/$GITHUB_ACTOR/my-python-app:latest

      - name: Deploy to Minikube
        run: |
          kubectl apply -f deployment-definition.yaml
          kubectl apply -f service-definition.yaml
          kubectl get deployments

      - name: Verify Deployment Exists
        run: |
          if ! kubectl get deployment/helloworld; then
            echo "ERROR: Deployment 'helloworld' not found!"
            exit 1
          fi

      - name: Wait for deployment to be ready
        run: |
          kubectl wait --for=condition=available --timeout=60s deployment/helloworld
  
      - name: Verify deployment, service and pods are running
        run: |
          kubectl rollout status deployment/helloworld
          kubectl get service helloworld-app-service -o wide
          kubectl get pods -l app=helloworld-app -o wide

      - name: Verify Kubernetes Pods are Running
        run: |
          POD_STATUS=$(kubectl get pods -l app=helloworld-app -o jsonpath='{.items[0].status.phase}')
          if [[ "$POD_STATUS" != "Running" ]]; then
            echo "ERROR: Pod is not running!"
            exit 1
          fi
          echo "✅ Pod is running."

      - name: Validate Logs Contain Expected Output
        run: |
          LOG_OUTPUT=$(kubectl logs -l app=helloworld-app --tail=10)
          if ! echo "$LOG_OUTPUT" | grep -q "Hello, World!"; then
            echo "ERROR: Expected log message not found!"
            exit 1
          fi
          echo "✅ Log output verified."
          
     
